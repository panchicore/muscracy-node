// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  mediaItem: (where?: MediaItemWhereInput) => Promise<boolean>;
  radio: (where?: RadioWhereInput) => Promise<boolean>;
  radioUser: (where?: RadioUserWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  mediaItem: (where: MediaItemWhereUniqueInput) => MediaItemNullablePromise;
  mediaItems: (args?: {
    where?: MediaItemWhereInput;
    orderBy?: MediaItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MediaItem>;
  mediaItemsConnection: (args?: {
    where?: MediaItemWhereInput;
    orderBy?: MediaItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MediaItemConnectionPromise;
  radio: (where: RadioWhereUniqueInput) => RadioNullablePromise;
  radios: (args?: {
    where?: RadioWhereInput;
    orderBy?: RadioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Radio>;
  radiosConnection: (args?: {
    where?: RadioWhereInput;
    orderBy?: RadioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RadioConnectionPromise;
  radioUser: (where: RadioUserWhereUniqueInput) => RadioUserNullablePromise;
  radioUsers: (args?: {
    where?: RadioUserWhereInput;
    orderBy?: RadioUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RadioUser>;
  radioUsersConnection: (args?: {
    where?: RadioUserWhereInput;
    orderBy?: RadioUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RadioUserConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMediaItem: (data: MediaItemCreateInput) => MediaItemPromise;
  updateMediaItem: (args: {
    data: MediaItemUpdateInput;
    where: MediaItemWhereUniqueInput;
  }) => MediaItemPromise;
  updateManyMediaItems: (args: {
    data: MediaItemUpdateManyMutationInput;
    where?: MediaItemWhereInput;
  }) => BatchPayloadPromise;
  upsertMediaItem: (args: {
    where: MediaItemWhereUniqueInput;
    create: MediaItemCreateInput;
    update: MediaItemUpdateInput;
  }) => MediaItemPromise;
  deleteMediaItem: (where: MediaItemWhereUniqueInput) => MediaItemPromise;
  deleteManyMediaItems: (where?: MediaItemWhereInput) => BatchPayloadPromise;
  createRadio: (data: RadioCreateInput) => RadioPromise;
  updateRadio: (args: {
    data: RadioUpdateInput;
    where: RadioWhereUniqueInput;
  }) => RadioPromise;
  updateManyRadios: (args: {
    data: RadioUpdateManyMutationInput;
    where?: RadioWhereInput;
  }) => BatchPayloadPromise;
  upsertRadio: (args: {
    where: RadioWhereUniqueInput;
    create: RadioCreateInput;
    update: RadioUpdateInput;
  }) => RadioPromise;
  deleteRadio: (where: RadioWhereUniqueInput) => RadioPromise;
  deleteManyRadios: (where?: RadioWhereInput) => BatchPayloadPromise;
  createRadioUser: (data: RadioUserCreateInput) => RadioUserPromise;
  updateRadioUser: (args: {
    data: RadioUserUpdateInput;
    where: RadioUserWhereUniqueInput;
  }) => RadioUserPromise;
  upsertRadioUser: (args: {
    where: RadioUserWhereUniqueInput;
    create: RadioUserCreateInput;
    update: RadioUserUpdateInput;
  }) => RadioUserPromise;
  deleteRadioUser: (where: RadioUserWhereUniqueInput) => RadioUserPromise;
  deleteManyRadioUsers: (where?: RadioUserWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  mediaItem: (
    where?: MediaItemSubscriptionWhereInput
  ) => MediaItemSubscriptionPayloadSubscription;
  radio: (
    where?: RadioSubscriptionWhereInput
  ) => RadioSubscriptionPayloadSubscription;
  radioUser: (
    where?: RadioUserSubscriptionWhereInput
  ) => RadioUserSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MediaItemStatus =
  | "REQUESTED"
  | "REJECTED"
  | "QUEUED"
  | "NOW_PLAYING"
  | "PLAYED";

export type RadioUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "connectedAt_ASC"
  | "connectedAt_DESC";

export type MediaItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "externalId_ASC"
  | "externalId_DESC"
  | "title_ASC"
  | "title_DESC"
  | "source_ASC"
  | "source_DESC"
  | "sentAt_ASC"
  | "sentAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type RadioOrderByInput = "id_ASC" | "id_DESC" | "hash_ASC" | "hash_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export type MediaItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RadioUserUpdateWithWhereUniqueWithoutRadioInput {
  where: RadioUserWhereUniqueInput;
  data: RadioUserUpdateWithoutRadioDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RadioUserUpdateWithoutRadioDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface MediaItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  externalId?: Maybe<String>;
  externalId_not?: Maybe<String>;
  externalId_in?: Maybe<String[] | String>;
  externalId_not_in?: Maybe<String[] | String>;
  externalId_lt?: Maybe<String>;
  externalId_lte?: Maybe<String>;
  externalId_gt?: Maybe<String>;
  externalId_gte?: Maybe<String>;
  externalId_contains?: Maybe<String>;
  externalId_not_contains?: Maybe<String>;
  externalId_starts_with?: Maybe<String>;
  externalId_not_starts_with?: Maybe<String>;
  externalId_ends_with?: Maybe<String>;
  externalId_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  sentBy?: Maybe<UserWhereInput>;
  sentAt?: Maybe<DateTimeInput>;
  sentAt_not?: Maybe<DateTimeInput>;
  sentAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sentAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sentAt_lt?: Maybe<DateTimeInput>;
  sentAt_lte?: Maybe<DateTimeInput>;
  sentAt_gt?: Maybe<DateTimeInput>;
  sentAt_gte?: Maybe<DateTimeInput>;
  radio?: Maybe<RadioWhereInput>;
  status?: Maybe<MediaItemStatus>;
  status_not?: Maybe<MediaItemStatus>;
  status_in?: Maybe<MediaItemStatus[] | MediaItemStatus>;
  status_not_in?: Maybe<MediaItemStatus[] | MediaItemStatus>;
  AND?: Maybe<MediaItemWhereInput[] | MediaItemWhereInput>;
  OR?: Maybe<MediaItemWhereInput[] | MediaItemWhereInput>;
  NOT?: Maybe<MediaItemWhereInput[] | MediaItemWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MediaItemCreateWithoutRadioInput {
  id?: Maybe<ID_Input>;
  externalId: String;
  title: String;
  source: String;
  sentBy: UserCreateOneInput;
  status?: Maybe<MediaItemStatus>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface RadioUserUpsertWithWhereUniqueWithoutRadioInput {
  where: RadioUserWhereUniqueInput;
  update: RadioUserUpdateWithoutRadioDataInput;
  create: RadioUserCreateWithoutRadioInput;
}

export interface RadioCreateOneWithoutMediaItemsInput {
  create?: Maybe<RadioCreateWithoutMediaItemsInput>;
  connect?: Maybe<RadioWhereUniqueInput>;
}

export interface RadioUserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RadioUserWhereInput>;
  AND?: Maybe<
    RadioUserSubscriptionWhereInput[] | RadioUserSubscriptionWhereInput
  >;
  OR?: Maybe<
    RadioUserSubscriptionWhereInput[] | RadioUserSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RadioUserSubscriptionWhereInput[] | RadioUserSubscriptionWhereInput
  >;
}

export interface RadioCreateWithoutMediaItemsInput {
  id?: Maybe<ID_Input>;
  hash: String;
  createdBy: UserCreateOneInput;
  people?: Maybe<RadioUserCreateManyWithoutRadioInput>;
}

export interface MediaItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MediaItemWhereInput>;
  AND?: Maybe<
    MediaItemSubscriptionWhereInput[] | MediaItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    MediaItemSubscriptionWhereInput[] | MediaItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MediaItemSubscriptionWhereInput[] | MediaItemSubscriptionWhereInput
  >;
}

export interface RadioUserCreateManyWithoutRadioInput {
  create?: Maybe<
    RadioUserCreateWithoutRadioInput[] | RadioUserCreateWithoutRadioInput
  >;
  connect?: Maybe<RadioUserWhereUniqueInput[] | RadioUserWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface RadioUserCreateWithoutRadioInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
}

export type RadioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  hash?: Maybe<String>;
}>;

export interface MediaItemUpdateInput {
  externalId?: Maybe<String>;
  title?: Maybe<String>;
  source?: Maybe<String>;
  sentBy?: Maybe<UserUpdateOneRequiredInput>;
  radio?: Maybe<RadioUpdateOneRequiredWithoutMediaItemsInput>;
  status?: Maybe<MediaItemStatus>;
}

export interface RadioUpdateOneRequiredWithoutPeopleInput {
  create?: Maybe<RadioCreateWithoutPeopleInput>;
  update?: Maybe<RadioUpdateWithoutPeopleDataInput>;
  upsert?: Maybe<RadioUpsertWithoutPeopleInput>;
  connect?: Maybe<RadioWhereUniqueInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RadioCreateWithoutPeopleInput {
  id?: Maybe<ID_Input>;
  hash: String;
  createdBy: UserCreateOneInput;
  mediaItems?: Maybe<MediaItemCreateManyWithoutRadioInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface RadioCreateOneWithoutPeopleInput {
  create?: Maybe<RadioCreateWithoutPeopleInput>;
  connect?: Maybe<RadioWhereUniqueInput>;
}

export interface MediaItemUpdateWithoutRadioDataInput {
  externalId?: Maybe<String>;
  title?: Maybe<String>;
  source?: Maybe<String>;
  sentBy?: Maybe<UserUpdateOneRequiredInput>;
  status?: Maybe<MediaItemStatus>;
}

export interface RadioUpdateManyMutationInput {
  hash?: Maybe<String>;
}

export interface RadioUpdateOneRequiredWithoutMediaItemsInput {
  create?: Maybe<RadioCreateWithoutMediaItemsInput>;
  update?: Maybe<RadioUpdateWithoutMediaItemsDataInput>;
  upsert?: Maybe<RadioUpsertWithoutMediaItemsInput>;
  connect?: Maybe<RadioWhereUniqueInput>;
}

export interface MediaItemUpdateManyDataInput {
  externalId?: Maybe<String>;
  title?: Maybe<String>;
  source?: Maybe<String>;
  status?: Maybe<MediaItemStatus>;
}

export interface RadioUpdateWithoutMediaItemsDataInput {
  hash?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  people?: Maybe<RadioUserUpdateManyWithoutRadioInput>;
}

export interface MediaItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  externalId?: Maybe<String>;
  externalId_not?: Maybe<String>;
  externalId_in?: Maybe<String[] | String>;
  externalId_not_in?: Maybe<String[] | String>;
  externalId_lt?: Maybe<String>;
  externalId_lte?: Maybe<String>;
  externalId_gt?: Maybe<String>;
  externalId_gte?: Maybe<String>;
  externalId_contains?: Maybe<String>;
  externalId_not_contains?: Maybe<String>;
  externalId_starts_with?: Maybe<String>;
  externalId_not_starts_with?: Maybe<String>;
  externalId_ends_with?: Maybe<String>;
  externalId_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  sentAt?: Maybe<DateTimeInput>;
  sentAt_not?: Maybe<DateTimeInput>;
  sentAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sentAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sentAt_lt?: Maybe<DateTimeInput>;
  sentAt_lte?: Maybe<DateTimeInput>;
  sentAt_gt?: Maybe<DateTimeInput>;
  sentAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<MediaItemStatus>;
  status_not?: Maybe<MediaItemStatus>;
  status_in?: Maybe<MediaItemStatus[] | MediaItemStatus>;
  status_not_in?: Maybe<MediaItemStatus[] | MediaItemStatus>;
  AND?: Maybe<MediaItemScalarWhereInput[] | MediaItemScalarWhereInput>;
  OR?: Maybe<MediaItemScalarWhereInput[] | MediaItemScalarWhereInput>;
  NOT?: Maybe<MediaItemScalarWhereInput[] | MediaItemScalarWhereInput>;
}

export interface RadioUserUpdateManyWithoutRadioInput {
  create?: Maybe<
    RadioUserCreateWithoutRadioInput[] | RadioUserCreateWithoutRadioInput
  >;
  delete?: Maybe<RadioUserWhereUniqueInput[] | RadioUserWhereUniqueInput>;
  connect?: Maybe<RadioUserWhereUniqueInput[] | RadioUserWhereUniqueInput>;
  set?: Maybe<RadioUserWhereUniqueInput[] | RadioUserWhereUniqueInput>;
  disconnect?: Maybe<RadioUserWhereUniqueInput[] | RadioUserWhereUniqueInput>;
  update?: Maybe<
    | RadioUserUpdateWithWhereUniqueWithoutRadioInput[]
    | RadioUserUpdateWithWhereUniqueWithoutRadioInput
  >;
  upsert?: Maybe<
    | RadioUserUpsertWithWhereUniqueWithoutRadioInput[]
    | RadioUserUpsertWithWhereUniqueWithoutRadioInput
  >;
  deleteMany?: Maybe<RadioUserScalarWhereInput[] | RadioUserScalarWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface RadioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  people_every?: Maybe<RadioUserWhereInput>;
  people_some?: Maybe<RadioUserWhereInput>;
  people_none?: Maybe<RadioUserWhereInput>;
  mediaItems_every?: Maybe<MediaItemWhereInput>;
  mediaItems_some?: Maybe<MediaItemWhereInput>;
  mediaItems_none?: Maybe<MediaItemWhereInput>;
  AND?: Maybe<RadioWhereInput[] | RadioWhereInput>;
  OR?: Maybe<RadioWhereInput[] | RadioWhereInput>;
  NOT?: Maybe<RadioWhereInput[] | RadioWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface RadioUserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  connectedAt?: Maybe<DateTimeInput>;
  connectedAt_not?: Maybe<DateTimeInput>;
  connectedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  connectedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  connectedAt_lt?: Maybe<DateTimeInput>;
  connectedAt_lte?: Maybe<DateTimeInput>;
  connectedAt_gt?: Maybe<DateTimeInput>;
  connectedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  radio?: Maybe<RadioWhereInput>;
  AND?: Maybe<RadioUserWhereInput[] | RadioUserWhereInput>;
  OR?: Maybe<RadioUserWhereInput[] | RadioUserWhereInput>;
  NOT?: Maybe<RadioUserWhereInput[] | RadioUserWhereInput>;
}

export interface RadioUpdateWithoutPeopleDataInput {
  hash?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  mediaItems?: Maybe<MediaItemUpdateManyWithoutRadioInput>;
}

export interface MediaItemUpdateWithWhereUniqueWithoutRadioInput {
  where: MediaItemWhereUniqueInput;
  data: MediaItemUpdateWithoutRadioDataInput;
}

export type RadioUserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RadioUserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  connectedAt?: Maybe<DateTimeInput>;
  connectedAt_not?: Maybe<DateTimeInput>;
  connectedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  connectedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  connectedAt_lt?: Maybe<DateTimeInput>;
  connectedAt_lte?: Maybe<DateTimeInput>;
  connectedAt_gt?: Maybe<DateTimeInput>;
  connectedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RadioUserScalarWhereInput[] | RadioUserScalarWhereInput>;
  OR?: Maybe<RadioUserScalarWhereInput[] | RadioUserScalarWhereInput>;
  NOT?: Maybe<RadioUserScalarWhereInput[] | RadioUserScalarWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface RadioUpsertWithoutMediaItemsInput {
  update: RadioUpdateWithoutMediaItemsDataInput;
  create: RadioCreateWithoutMediaItemsInput;
}

export interface MediaItemUpsertWithWhereUniqueWithoutRadioInput {
  where: MediaItemWhereUniqueInput;
  update: MediaItemUpdateWithoutRadioDataInput;
  create: MediaItemCreateWithoutRadioInput;
}

export interface MediaItemUpdateManyMutationInput {
  externalId?: Maybe<String>;
  title?: Maybe<String>;
  source?: Maybe<String>;
  status?: Maybe<MediaItemStatus>;
}

export interface RadioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RadioWhereInput>;
  AND?: Maybe<RadioSubscriptionWhereInput[] | RadioSubscriptionWhereInput>;
  OR?: Maybe<RadioSubscriptionWhereInput[] | RadioSubscriptionWhereInput>;
  NOT?: Maybe<RadioSubscriptionWhereInput[] | RadioSubscriptionWhereInput>;
}

export interface MediaItemCreateManyWithoutRadioInput {
  create?: Maybe<
    MediaItemCreateWithoutRadioInput[] | MediaItemCreateWithoutRadioInput
  >;
  connect?: Maybe<MediaItemWhereUniqueInput[] | MediaItemWhereUniqueInput>;
}

export interface RadioCreateInput {
  id?: Maybe<ID_Input>;
  hash: String;
  createdBy: UserCreateOneInput;
  people?: Maybe<RadioUserCreateManyWithoutRadioInput>;
  mediaItems?: Maybe<MediaItemCreateManyWithoutRadioInput>;
}

export interface RadioUpdateInput {
  hash?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  people?: Maybe<RadioUserUpdateManyWithoutRadioInput>;
  mediaItems?: Maybe<MediaItemUpdateManyWithoutRadioInput>;
}

export interface MediaItemUpdateManyWithoutRadioInput {
  create?: Maybe<
    MediaItemCreateWithoutRadioInput[] | MediaItemCreateWithoutRadioInput
  >;
  delete?: Maybe<MediaItemWhereUniqueInput[] | MediaItemWhereUniqueInput>;
  connect?: Maybe<MediaItemWhereUniqueInput[] | MediaItemWhereUniqueInput>;
  set?: Maybe<MediaItemWhereUniqueInput[] | MediaItemWhereUniqueInput>;
  disconnect?: Maybe<MediaItemWhereUniqueInput[] | MediaItemWhereUniqueInput>;
  update?: Maybe<
    | MediaItemUpdateWithWhereUniqueWithoutRadioInput[]
    | MediaItemUpdateWithWhereUniqueWithoutRadioInput
  >;
  upsert?: Maybe<
    | MediaItemUpsertWithWhereUniqueWithoutRadioInput[]
    | MediaItemUpsertWithWhereUniqueWithoutRadioInput
  >;
  deleteMany?: Maybe<MediaItemScalarWhereInput[] | MediaItemScalarWhereInput>;
  updateMany?: Maybe<
    | MediaItemUpdateManyWithWhereNestedInput[]
    | MediaItemUpdateManyWithWhereNestedInput
  >;
}

export interface RadioUpsertWithoutPeopleInput {
  update: RadioUpdateWithoutPeopleDataInput;
  create: RadioCreateWithoutPeopleInput;
}

export interface MediaItemCreateInput {
  id?: Maybe<ID_Input>;
  externalId: String;
  title: String;
  source: String;
  sentBy: UserCreateOneInput;
  radio: RadioCreateOneWithoutMediaItemsInput;
  status?: Maybe<MediaItemStatus>;
}

export interface MediaItemUpdateManyWithWhereNestedInput {
  where: MediaItemScalarWhereInput;
  data: MediaItemUpdateManyDataInput;
}

export interface RadioUserCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  radio: RadioCreateOneWithoutPeopleInput;
}

export interface RadioUserUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  radio?: Maybe<RadioUpdateOneRequiredWithoutPeopleInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMediaItem {
  count: Int;
}

export interface AggregateMediaItemPromise
  extends Promise<AggregateMediaItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMediaItemSubscription
  extends Promise<AsyncIterator<AggregateMediaItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Radio {
  id: ID_Output;
  hash: String;
}

export interface RadioPromise extends Promise<Radio>, Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  people: <T = FragmentableArray<RadioUser>>(args?: {
    where?: RadioUserWhereInput;
    orderBy?: RadioUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mediaItems: <T = FragmentableArray<MediaItem>>(args?: {
    where?: MediaItemWhereInput;
    orderBy?: MediaItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RadioSubscription
  extends Promise<AsyncIterator<Radio>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  people: <T = Promise<AsyncIterator<RadioUserSubscription>>>(args?: {
    where?: RadioUserWhereInput;
    orderBy?: RadioUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mediaItems: <T = Promise<AsyncIterator<MediaItemSubscription>>>(args?: {
    where?: MediaItemWhereInput;
    orderBy?: MediaItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RadioNullablePromise
  extends Promise<Radio | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  people: <T = FragmentableArray<RadioUser>>(args?: {
    where?: RadioUserWhereInput;
    orderBy?: RadioUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mediaItems: <T = FragmentableArray<MediaItem>>(args?: {
    where?: MediaItemWhereInput;
    orderBy?: MediaItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface RadioUserSubscriptionPayload {
  mutation: MutationType;
  node: RadioUser;
  updatedFields: String[];
  previousValues: RadioUserPreviousValues;
}

export interface RadioUserSubscriptionPayloadPromise
  extends Promise<RadioUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RadioUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RadioUserPreviousValuesPromise>() => T;
}

export interface RadioUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RadioUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RadioUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RadioUserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MediaItemEdge {
  node: MediaItem;
  cursor: String;
}

export interface MediaItemEdgePromise
  extends Promise<MediaItemEdge>,
    Fragmentable {
  node: <T = MediaItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MediaItemEdgeSubscription
  extends Promise<AsyncIterator<MediaItemEdge>>,
    Fragmentable {
  node: <T = MediaItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RadioUser {
  id: ID_Output;
  connectedAt: DateTimeOutput;
}

export interface RadioUserPromise extends Promise<RadioUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  connectedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  radio: <T = RadioPromise>() => T;
}

export interface RadioUserSubscription
  extends Promise<AsyncIterator<RadioUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  connectedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  radio: <T = RadioSubscription>() => T;
}

export interface RadioUserNullablePromise
  extends Promise<RadioUser | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  connectedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  radio: <T = RadioPromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RadioUserPreviousValues {
  id: ID_Output;
  connectedAt: DateTimeOutput;
}

export interface RadioUserPreviousValuesPromise
  extends Promise<RadioUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  connectedAt: () => Promise<DateTimeOutput>;
}

export interface RadioUserPreviousValuesSubscription
  extends Promise<AsyncIterator<RadioUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  connectedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RadioUserEdge {
  node: RadioUser;
  cursor: String;
}

export interface RadioUserEdgePromise
  extends Promise<RadioUserEdge>,
    Fragmentable {
  node: <T = RadioUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RadioUserEdgeSubscription
  extends Promise<AsyncIterator<RadioUserEdge>>,
    Fragmentable {
  node: <T = RadioUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MediaItem {
  id: ID_Output;
  externalId: String;
  title: String;
  source: String;
  sentAt: DateTimeOutput;
  status: MediaItemStatus;
}

export interface MediaItemPromise extends Promise<MediaItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  externalId: () => Promise<String>;
  title: () => Promise<String>;
  source: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
  sentAt: () => Promise<DateTimeOutput>;
  radio: <T = RadioPromise>() => T;
  status: () => Promise<MediaItemStatus>;
}

export interface MediaItemSubscription
  extends Promise<AsyncIterator<MediaItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  externalId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  sentBy: <T = UserSubscription>() => T;
  sentAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  radio: <T = RadioSubscription>() => T;
  status: () => Promise<AsyncIterator<MediaItemStatus>>;
}

export interface MediaItemNullablePromise
  extends Promise<MediaItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  externalId: () => Promise<String>;
  title: () => Promise<String>;
  source: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
  sentAt: () => Promise<DateTimeOutput>;
  radio: <T = RadioPromise>() => T;
  status: () => Promise<MediaItemStatus>;
}

export interface AggregateRadio {
  count: Int;
}

export interface AggregateRadioPromise
  extends Promise<AggregateRadio>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRadioSubscription
  extends Promise<AsyncIterator<AggregateRadio>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MediaItemSubscriptionPayload {
  mutation: MutationType;
  node: MediaItem;
  updatedFields: String[];
  previousValues: MediaItemPreviousValues;
}

export interface MediaItemSubscriptionPayloadPromise
  extends Promise<MediaItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MediaItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MediaItemPreviousValuesPromise>() => T;
}

export interface MediaItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MediaItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MediaItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MediaItemPreviousValuesSubscription>() => T;
}

export interface RadioConnection {
  pageInfo: PageInfo;
  edges: RadioEdge[];
}

export interface RadioConnectionPromise
  extends Promise<RadioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RadioEdge>>() => T;
  aggregate: <T = AggregateRadioPromise>() => T;
}

export interface RadioConnectionSubscription
  extends Promise<AsyncIterator<RadioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RadioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRadioSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface RadioPreviousValues {
  id: ID_Output;
  hash: String;
}

export interface RadioPreviousValuesPromise
  extends Promise<RadioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
}

export interface RadioPreviousValuesSubscription
  extends Promise<AsyncIterator<RadioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
}

export interface RadioSubscriptionPayload {
  mutation: MutationType;
  node: Radio;
  updatedFields: String[];
  previousValues: RadioPreviousValues;
}

export interface RadioSubscriptionPayloadPromise
  extends Promise<RadioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RadioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RadioPreviousValuesPromise>() => T;
}

export interface RadioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RadioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RadioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RadioPreviousValuesSubscription>() => T;
}

export interface MediaItemConnection {
  pageInfo: PageInfo;
  edges: MediaItemEdge[];
}

export interface MediaItemConnectionPromise
  extends Promise<MediaItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MediaItemEdge>>() => T;
  aggregate: <T = AggregateMediaItemPromise>() => T;
}

export interface MediaItemConnectionSubscription
  extends Promise<AsyncIterator<MediaItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MediaItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMediaItemSubscription>() => T;
}

export interface MediaItemPreviousValues {
  id: ID_Output;
  externalId: String;
  title: String;
  source: String;
  sentAt: DateTimeOutput;
  status: MediaItemStatus;
}

export interface MediaItemPreviousValuesPromise
  extends Promise<MediaItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  externalId: () => Promise<String>;
  title: () => Promise<String>;
  source: () => Promise<String>;
  sentAt: () => Promise<DateTimeOutput>;
  status: () => Promise<MediaItemStatus>;
}

export interface MediaItemPreviousValuesSubscription
  extends Promise<AsyncIterator<MediaItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  externalId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  sentAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<MediaItemStatus>>;
}

export interface AggregateRadioUser {
  count: Int;
}

export interface AggregateRadioUserPromise
  extends Promise<AggregateRadioUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRadioUserSubscription
  extends Promise<AsyncIterator<AggregateRadioUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RadioEdge {
  node: Radio;
  cursor: String;
}

export interface RadioEdgePromise extends Promise<RadioEdge>, Fragmentable {
  node: <T = RadioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RadioEdgeSubscription
  extends Promise<AsyncIterator<RadioEdge>>,
    Fragmentable {
  node: <T = RadioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RadioUserConnection {
  pageInfo: PageInfo;
  edges: RadioUserEdge[];
}

export interface RadioUserConnectionPromise
  extends Promise<RadioUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RadioUserEdge>>() => T;
  aggregate: <T = AggregateRadioUserPromise>() => T;
}

export interface RadioUserConnectionSubscription
  extends Promise<AsyncIterator<RadioUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RadioUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRadioUserSubscription>() => T;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Radio",
    embedded: false
  },
  {
    name: "RadioUser",
    embedded: false
  },
  {
    name: "MediaItem",
    embedded: false
  },
  {
    name: "MediaItemStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
